{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Toolkit = void 0;\n\nconst closest = require(\"closest\");\n\nlet Toolkit =\n/** @class */\n(() => {\n  class Toolkit {\n    /**\n     * Generats a unique ID (thanks Stack overflow :3)\n     * @returns {String}\n     */\n    static UID() {\n      if (Toolkit.TESTING) {\n        Toolkit.TESTING_UID++;\n        return `${Toolkit.TESTING_UID}`;\n      }\n\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = Math.random() * 16 | 0;\n        const v = c === 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n      });\n    }\n    /**\n     * Finds the closest element as a polyfill\n     */\n\n\n    static closest(element, selector) {\n      if (document.body.closest) {\n        return element.closest(selector);\n      }\n\n      return closest(element, selector);\n    }\n\n  }\n\n  Toolkit.TESTING = false;\n  Toolkit.TESTING_UID = 0;\n  return Toolkit;\n})();\n\nexports.Toolkit = Toolkit;","map":{"version":3,"sources":["../../src/Toolkit.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAA,OAAA;AAAA;AAAA,CAAA,MAAA;AAAA,QAAa,OAAb,CAAoB;AAInB;;;;AAIO,WAAO,GAAP,GAAU;AAChB,UAAI,OAAO,CAAC,OAAZ,EAAqB;AACpB,QAAA,OAAO,CAAC,WAAR;AACA,eAAO,GAAG,OAAO,CAAC,WAAW,EAA7B;AACA;;AACD,aAAO,uCAAuC,OAAvC,CAA+C,OAA/C,EAAyD,CAAD,IAAM;AACpE,cAAM,CAAC,GAAI,IAAI,CAAC,MAAL,KAAgB,EAAjB,GAAuB,CAAjC;AACA,cAAM,CAAC,GAAG,CAAC,KAAK,GAAN,GAAY,CAAZ,GAAiB,CAAC,GAAG,GAAL,GAAY,GAAtC;AACA,eAAO,CAAC,CAAC,QAAF,CAAW,EAAX,CAAP;AACA,OAJM,CAAP;AAKA;AAED;;;;;AAGO,WAAO,OAAP,CAAe,OAAf,EAAiC,QAAjC,EAAiD;AACvD,UAAI,QAAQ,CAAC,IAAT,CAAc,OAAlB,EAA2B;AAC1B,eAAO,OAAO,CAAC,OAAR,CAAgB,QAAhB,CAAP;AACA;;AACD,aAAO,OAAO,CAAC,OAAD,EAAU,QAAV,CAAd;AACA;;AA5BkB;;AACZ,EAAA,OAAA,CAAA,OAAA,GAAmB,KAAnB;AACA,EAAA,OAAA,CAAA,WAAA,GAAc,CAAd;AA2BR,SAAA,OAAA;AAAC,CA7BD,GAAA;;AAAa,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Toolkit = void 0;\nconst closest = require(\"closest\");\nlet Toolkit = /** @class */ (() => {\n    class Toolkit {\n        /**\n         * Generats a unique ID (thanks Stack overflow :3)\n         * @returns {String}\n         */\n        static UID() {\n            if (Toolkit.TESTING) {\n                Toolkit.TESTING_UID++;\n                return `${Toolkit.TESTING_UID}`;\n            }\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n                const r = (Math.random() * 16) | 0;\n                const v = c === 'x' ? r : (r & 0x3) | 0x8;\n                return v.toString(16);\n            });\n        }\n        /**\n         * Finds the closest element as a polyfill\n         */\n        static closest(element, selector) {\n            if (document.body.closest) {\n                return element.closest(selector);\n            }\n            return closest(element, selector);\n        }\n    }\n    Toolkit.TESTING = false;\n    Toolkit.TESTING_UID = 0;\n    return Toolkit;\n})();\nexports.Toolkit = Toolkit;\n//# sourceMappingURL=Toolkit.js.map"]},"metadata":{},"sourceType":"script"}