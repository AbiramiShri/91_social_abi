{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RightAngleLinkWidget = void 0;\n\nconst React = require(\"react\");\n\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\n\nconst react_diagrams_defaults_1 = require(\"@projectstorm/react-diagrams-defaults\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nlet RightAngleLinkWidget =\n/** @class */\n(() => {\n  class RightAngleLinkWidget extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.handleMove = function (event) {\n        this.draggingEvent(event, this.dragging_index);\n      }.bind(this);\n\n      this.handleUp = function (event) {\n        // Unregister handlers to avoid multiple event handlers for other links\n        this.setState({\n          canDrag: false,\n          selected: false\n        });\n        window.removeEventListener('mousemove', this.handleMove);\n        window.removeEventListener('mouseup', this.handleUp);\n      }.bind(this);\n\n      this.refPaths = [];\n      this.state = {\n        selected: false,\n        canDrag: false\n      };\n      this.dragging_index = 0;\n    }\n\n    componentDidUpdate() {\n      this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n        return ref.current;\n      }));\n    }\n\n    componentDidMount() {\n      this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n        return ref.current;\n      }));\n    }\n\n    componentWillUnmount() {\n      this.props.link.setRenderedPaths([]);\n    }\n\n    generateLink(path, extraProps, id) {\n      const ref = React.createRef();\n      this.refPaths.push(ref);\n      return React.createElement(react_diagrams_defaults_1.DefaultLinkSegmentWidget, {\n        key: `link-${id}`,\n        path: path,\n        selected: this.state.selected,\n        diagramEngine: this.props.diagramEngine,\n        factory: this.props.diagramEngine.getFactoryForLink(this.props.link),\n        link: this.props.link,\n        forwardRef: ref,\n        onSelection: selected => {\n          this.setState({\n            selected: selected\n          });\n        },\n        extras: extraProps\n      });\n    }\n\n    calculatePositions(points, event, index, coordinate) {\n      // If path is first or last add another point to keep node port on its position\n      if (index === 0) {\n        let point = new react_diagrams_core_1.PointModel({\n          link: this.props.link,\n          position: new geometry_1.Point(points[index].getX(), points[index].getY())\n        });\n        this.props.link.addPoint(point, index);\n        this.dragging_index++;\n        return;\n      } else if (index === points.length - 2) {\n        let point = new react_diagrams_core_1.PointModel({\n          link: this.props.link,\n          position: new geometry_1.Point(points[index + 1].getX(), points[index + 1].getY())\n        });\n        this.props.link.addPoint(point, index + 1);\n        return;\n      } // Merge two points if it is not close to node port and close to each other\n\n\n      if (index - 2 > 0) {\n        let _points = {\n          [index - 2]: points[index - 2].getPosition(),\n          [index + 1]: points[index + 1].getPosition(),\n          [index - 1]: points[index - 1].getPosition()\n        };\n\n        if (Math.abs(_points[index - 1][coordinate] - _points[index + 1][coordinate]) < 5) {\n          _points[index - 2][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n          _points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n          points[index - 2].setPosition(_points[index - 2]);\n          points[index + 1].setPosition(_points[index + 1]);\n          points[index - 1].remove();\n          points[index - 1].remove();\n          this.dragging_index--;\n          this.dragging_index--;\n          return;\n        }\n      } // Merge two points if it is not close to node port\n\n\n      if (index + 2 < points.length - 2) {\n        let _points = {\n          [index + 3]: points[index + 3].getPosition(),\n          [index + 2]: points[index + 2].getPosition(),\n          [index + 1]: points[index + 1].getPosition(),\n          [index]: points[index].getPosition()\n        };\n\n        if (Math.abs(_points[index + 1][coordinate] - _points[index + 2][coordinate]) < 5) {\n          _points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n          _points[index + 3][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n          points[index].setPosition(_points[index]);\n          points[index + 3].setPosition(_points[index + 3]);\n          points[index + 1].remove();\n          points[index + 1].remove();\n          return;\n        }\n      } // If no condition above handled then just update path points position\n\n\n      let _points = {\n        [index]: points[index].getPosition(),\n        [index + 1]: points[index + 1].getPosition()\n      };\n      _points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n      _points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n      points[index].setPosition(_points[index]);\n      points[index + 1].setPosition(_points[index + 1]);\n    }\n\n    draggingEvent(event, index) {\n      let points = this.props.link.getPoints(); // get moving difference. Index + 1 will work because links indexes has\n      // length = points.lenght - 1\n\n      let dx = Math.abs(points[index].getX() - points[index + 1].getX());\n      let dy = Math.abs(points[index].getY() - points[index + 1].getY()); // moving with y direction\n\n      if (dx === 0) {\n        this.calculatePositions(points, event, index, 'x');\n      } else if (dy === 0) {\n        this.calculatePositions(points, event, index, 'y');\n      }\n\n      this.props.link.setFirstAndLastPathsDirection();\n    }\n\n    render() {\n      //ensure id is present for all points on the path\n      let points = this.props.link.getPoints();\n      let paths = []; // Get points based on link orientation\n\n      let pointLeft = points[0];\n      let pointRight = points[points.length - 1];\n      let hadToSwitch = false;\n\n      if (pointLeft.getX() > pointRight.getX()) {\n        pointLeft = points[points.length - 1];\n        pointRight = points[0];\n        hadToSwitch = true;\n      }\n\n      let dy = Math.abs(points[0].getY() - points[points.length - 1].getY()); // When new link add one middle point to get everywhere 90° angle\n\n      if (this.props.link.getTargetPort() === null && points.length === 2) {\n        [...Array(2)].forEach(item => {\n          this.props.link.addPoint(new react_diagrams_core_1.PointModel({\n            link: this.props.link,\n            position: new geometry_1.Point(pointLeft.getX(), pointRight.getY())\n          }), 1);\n        });\n        this.props.link.setManuallyFirstAndLastPathsDirection(true, true);\n      } // When new link is moving and not connected to target port move with middle point\n      // TODO: @DanielLazarLDAPPS This will be better to update in DragNewLinkState\n      //  in function fireMouseMoved to avoid calling this unexpectedly e.g. after Deserialize\n      else if (this.props.link.getTargetPort() === null && this.props.link.getSourcePort() !== null) {\n          points[1].setPosition(pointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2, !hadToSwitch ? pointLeft.getY() : pointRight.getY());\n          points[2].setPosition(pointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2, !hadToSwitch ? pointRight.getY() : pointLeft.getY());\n        } // Render was called but link is not moved but user.\n        // Node is moved and in this case fix coordinates to get 90° angle.\n        // For loop just for first and last path\n        else if (!this.state.canDrag && points.length > 2) {\n            // Those points and its position only will be moved\n            for (let i = 1; i < points.length; i += points.length - 2) {\n              if (i - 1 === 0) {\n                if (this.props.link.getFirstPathXdirection()) {\n                  points[i].setPosition(points[i].getX(), points[i - 1].getY());\n                } else {\n                  points[i].setPosition(points[i - 1].getX(), points[i].getY());\n                }\n              } else {\n                if (this.props.link.getLastPathXdirection()) {\n                  points[i - 1].setPosition(points[i - 1].getX(), points[i].getY());\n                } else {\n                  points[i - 1].setPosition(points[i].getX(), points[i - 1].getY());\n                }\n              }\n            }\n          } // If there is existing link which has two points add one\n      // NOTE: It doesn't matter if check is for dy or dx\n\n\n      if (points.length === 2 && dy !== 0 && !this.state.canDrag) {\n        this.props.link.addPoint(new react_diagrams_core_1.PointModel({\n          link: this.props.link,\n          position: new geometry_1.Point(pointLeft.getX(), pointRight.getY())\n        }));\n      }\n\n      for (let j = 0; j < points.length - 1; j++) {\n        paths.push(this.generateLink(react_diagrams_core_1.LinkWidget.generateLinePath(points[j], points[j + 1]), {\n          'data-linkid': this.props.link.getID(),\n          'data-point': j,\n          onMouseDown: event => {\n            if (event.button === 0) {\n              this.setState({\n                canDrag: true\n              });\n              this.dragging_index = j; // Register mouse move event to track mouse position\n              // On mouse up these events are unregistered check \"this.handleUp\"\n\n              window.addEventListener('mousemove', this.handleMove);\n              window.addEventListener('mouseup', this.handleUp);\n            }\n          },\n          onMouseEnter: event => {\n            this.setState({\n              selected: true\n            });\n            this.props.link.lastHoverIndexOfPath = j;\n          }\n        }, j));\n      }\n\n      this.refPaths = [];\n      return React.createElement(\"g\", {\n        \"data-default-link-test\": this.props.link.getOptions().testName\n      }, paths);\n    }\n\n  }\n\n  RightAngleLinkWidget.defaultProps = {\n    color: 'red',\n    width: 3,\n    link: null,\n    smooth: false,\n    diagramEngine: null,\n    factory: null\n  };\n  return RightAngleLinkWidget;\n})();\n\nexports.RightAngleLinkWidget = RightAngleLinkWidget;","map":{"version":3,"sources":["../../../src/link/RightAngleLinkWidget.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RightAngleLinkWidget = void 0;\nconst React = require(\"react\");\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\nconst react_diagrams_defaults_1 = require(\"@projectstorm/react-diagrams-defaults\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nlet RightAngleLinkWidget = /** @class */ (() => {\n    class RightAngleLinkWidget extends React.Component {\n        constructor(props) {\n            super(props);\n            this.handleMove = function (event) {\n                this.draggingEvent(event, this.dragging_index);\n            }.bind(this);\n            this.handleUp = function (event) {\n                // Unregister handlers to avoid multiple event handlers for other links\n                this.setState({ canDrag: false, selected: false });\n                window.removeEventListener('mousemove', this.handleMove);\n                window.removeEventListener('mouseup', this.handleUp);\n            }.bind(this);\n            this.refPaths = [];\n            this.state = {\n                selected: false,\n                canDrag: false\n            };\n            this.dragging_index = 0;\n        }\n        componentDidUpdate() {\n            this.props.link.setRenderedPaths(this.refPaths.map((ref) => {\n                return ref.current;\n            }));\n        }\n        componentDidMount() {\n            this.props.link.setRenderedPaths(this.refPaths.map((ref) => {\n                return ref.current;\n            }));\n        }\n        componentWillUnmount() {\n            this.props.link.setRenderedPaths([]);\n        }\n        generateLink(path, extraProps, id) {\n            const ref = React.createRef();\n            this.refPaths.push(ref);\n            return (React.createElement(react_diagrams_defaults_1.DefaultLinkSegmentWidget, { key: `link-${id}`, path: path, selected: this.state.selected, diagramEngine: this.props.diagramEngine, factory: this.props.diagramEngine.getFactoryForLink(this.props.link), link: this.props.link, forwardRef: ref, onSelection: (selected) => {\n                    this.setState({ selected: selected });\n                }, extras: extraProps }));\n        }\n        calculatePositions(points, event, index, coordinate) {\n            // If path is first or last add another point to keep node port on its position\n            if (index === 0) {\n                let point = new react_diagrams_core_1.PointModel({\n                    link: this.props.link,\n                    position: new geometry_1.Point(points[index].getX(), points[index].getY())\n                });\n                this.props.link.addPoint(point, index);\n                this.dragging_index++;\n                return;\n            }\n            else if (index === points.length - 2) {\n                let point = new react_diagrams_core_1.PointModel({\n                    link: this.props.link,\n                    position: new geometry_1.Point(points[index + 1].getX(), points[index + 1].getY())\n                });\n                this.props.link.addPoint(point, index + 1);\n                return;\n            }\n            // Merge two points if it is not close to node port and close to each other\n            if (index - 2 > 0) {\n                let _points = {\n                    [index - 2]: points[index - 2].getPosition(),\n                    [index + 1]: points[index + 1].getPosition(),\n                    [index - 1]: points[index - 1].getPosition()\n                };\n                if (Math.abs(_points[index - 1][coordinate] - _points[index + 1][coordinate]) < 5) {\n                    _points[index - 2][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n                    _points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n                    points[index - 2].setPosition(_points[index - 2]);\n                    points[index + 1].setPosition(_points[index + 1]);\n                    points[index - 1].remove();\n                    points[index - 1].remove();\n                    this.dragging_index--;\n                    this.dragging_index--;\n                    return;\n                }\n            }\n            // Merge two points if it is not close to node port\n            if (index + 2 < points.length - 2) {\n                let _points = {\n                    [index + 3]: points[index + 3].getPosition(),\n                    [index + 2]: points[index + 2].getPosition(),\n                    [index + 1]: points[index + 1].getPosition(),\n                    [index]: points[index].getPosition()\n                };\n                if (Math.abs(_points[index + 1][coordinate] - _points[index + 2][coordinate]) < 5) {\n                    _points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n                    _points[index + 3][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n                    points[index].setPosition(_points[index]);\n                    points[index + 3].setPosition(_points[index + 3]);\n                    points[index + 1].remove();\n                    points[index + 1].remove();\n                    return;\n                }\n            }\n            // If no condition above handled then just update path points position\n            let _points = {\n                [index]: points[index].getPosition(),\n                [index + 1]: points[index + 1].getPosition()\n            };\n            _points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n            _points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n            points[index].setPosition(_points[index]);\n            points[index + 1].setPosition(_points[index + 1]);\n        }\n        draggingEvent(event, index) {\n            let points = this.props.link.getPoints();\n            // get moving difference. Index + 1 will work because links indexes has\n            // length = points.lenght - 1\n            let dx = Math.abs(points[index].getX() - points[index + 1].getX());\n            let dy = Math.abs(points[index].getY() - points[index + 1].getY());\n            // moving with y direction\n            if (dx === 0) {\n                this.calculatePositions(points, event, index, 'x');\n            }\n            else if (dy === 0) {\n                this.calculatePositions(points, event, index, 'y');\n            }\n            this.props.link.setFirstAndLastPathsDirection();\n        }\n        render() {\n            //ensure id is present for all points on the path\n            let points = this.props.link.getPoints();\n            let paths = [];\n            // Get points based on link orientation\n            let pointLeft = points[0];\n            let pointRight = points[points.length - 1];\n            let hadToSwitch = false;\n            if (pointLeft.getX() > pointRight.getX()) {\n                pointLeft = points[points.length - 1];\n                pointRight = points[0];\n                hadToSwitch = true;\n            }\n            let dy = Math.abs(points[0].getY() - points[points.length - 1].getY());\n            // When new link add one middle point to get everywhere 90° angle\n            if (this.props.link.getTargetPort() === null && points.length === 2) {\n                [...Array(2)].forEach((item) => {\n                    this.props.link.addPoint(new react_diagrams_core_1.PointModel({\n                        link: this.props.link,\n                        position: new geometry_1.Point(pointLeft.getX(), pointRight.getY())\n                    }), 1);\n                });\n                this.props.link.setManuallyFirstAndLastPathsDirection(true, true);\n            }\n            // When new link is moving and not connected to target port move with middle point\n            // TODO: @DanielLazarLDAPPS This will be better to update in DragNewLinkState\n            //  in function fireMouseMoved to avoid calling this unexpectedly e.g. after Deserialize\n            else if (this.props.link.getTargetPort() === null && this.props.link.getSourcePort() !== null) {\n                points[1].setPosition(pointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2, !hadToSwitch ? pointLeft.getY() : pointRight.getY());\n                points[2].setPosition(pointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2, !hadToSwitch ? pointRight.getY() : pointLeft.getY());\n            }\n            // Render was called but link is not moved but user.\n            // Node is moved and in this case fix coordinates to get 90° angle.\n            // For loop just for first and last path\n            else if (!this.state.canDrag && points.length > 2) {\n                // Those points and its position only will be moved\n                for (let i = 1; i < points.length; i += points.length - 2) {\n                    if (i - 1 === 0) {\n                        if (this.props.link.getFirstPathXdirection()) {\n                            points[i].setPosition(points[i].getX(), points[i - 1].getY());\n                        }\n                        else {\n                            points[i].setPosition(points[i - 1].getX(), points[i].getY());\n                        }\n                    }\n                    else {\n                        if (this.props.link.getLastPathXdirection()) {\n                            points[i - 1].setPosition(points[i - 1].getX(), points[i].getY());\n                        }\n                        else {\n                            points[i - 1].setPosition(points[i].getX(), points[i - 1].getY());\n                        }\n                    }\n                }\n            }\n            // If there is existing link which has two points add one\n            // NOTE: It doesn't matter if check is for dy or dx\n            if (points.length === 2 && dy !== 0 && !this.state.canDrag) {\n                this.props.link.addPoint(new react_diagrams_core_1.PointModel({\n                    link: this.props.link,\n                    position: new geometry_1.Point(pointLeft.getX(), pointRight.getY())\n                }));\n            }\n            for (let j = 0; j < points.length - 1; j++) {\n                paths.push(this.generateLink(react_diagrams_core_1.LinkWidget.generateLinePath(points[j], points[j + 1]), {\n                    'data-linkid': this.props.link.getID(),\n                    'data-point': j,\n                    onMouseDown: (event) => {\n                        if (event.button === 0) {\n                            this.setState({ canDrag: true });\n                            this.dragging_index = j;\n                            // Register mouse move event to track mouse position\n                            // On mouse up these events are unregistered check \"this.handleUp\"\n                            window.addEventListener('mousemove', this.handleMove);\n                            window.addEventListener('mouseup', this.handleUp);\n                        }\n                    },\n                    onMouseEnter: (event) => {\n                        this.setState({ selected: true });\n                        this.props.link.lastHoverIndexOfPath = j;\n                    }\n                }, j));\n            }\n            this.refPaths = [];\n            return React.createElement(\"g\", { \"data-default-link-test\": this.props.link.getOptions().testName }, paths);\n        }\n    }\n    RightAngleLinkWidget.defaultProps = {\n        color: 'red',\n        width: 3,\n        link: null,\n        smooth: false,\n        diagramEngine: null,\n        factory: null\n    };\n    return RightAngleLinkWidget;\n})();\nexports.RightAngleLinkWidget = RightAngleLinkWidget;\n//# sourceMappingURL=RightAngleLinkWidget.js.map"]},"metadata":{},"sourceType":"script"}